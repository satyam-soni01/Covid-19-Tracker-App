{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","isRed","cases","isGrey","active","total","props","Card","onClick","className","CardContent","Typography","color","isloading","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","prettyPrintStat","stat","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","isLoading","setLoading","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.077de6e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\n\r\nfunction InfoBox({title, isRed, isGrey, cases , active, total, ...props}) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick}\r\n        className={`infobox ${active && 'infobox--selected'} \r\n        ${isRed && 'infobox--red'}`}>\r\n            <CardContent>\r\n                <Typography className=\"infobox__title\" color=\"textSecondary\">{title}</Typography>\r\n                <h2 \r\n                className={`infobox__cases ${!isRed && \"infobox__cases--green\"}`}>\r\n                    {props.isloading ? <i className=\"fa fa-cog fa-spin fa-fw\" /> : cases}\r\n                </h2>\r\n                <Typography className=\"infobox__total\" color=\"textSecondary\">\r\n                    {total} Total \r\n                </Typography>    \r\n            </CardContent>  \r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import {Circle, Popup} from \"react-leaflet\";\r\nimport React from\"react\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 400,\r\n    },\r\n    recovered: {\r\n      hex: \"#7DD71D\",\r\n      multiplier: 400,\r\n    },\r\n    deaths: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 800,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n    return sortedData;\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType) => \r\n    data.map(country => (\r\n        <Circle\r\n            center = {[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity = {0.4}\r\n            pathOptions={{\r\n              color: casesTypeColors[casesType].hex,\r\n              fillColor: casesTypeColors[casesType].hex,\r\n            }}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n          <Popup>\r\n              <div className=\"info-container\">\r\n                  <div className=\"info-flag\"\r\n                      style={{backgroundImage: `url(${country.countryInfo.flag})`}}    \r\n                  />\r\n                  <div className=\"info-name\">{country.country}</div>\r\n                  <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                  <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                  <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n              </div>\r\n          </Popup>\r\n        </Circle>\r\n    ));\r\n\r\n    export const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React from 'react';\r\nimport './Map.css';\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({casesType, countries, center, zoom}) {\r\n\r\n    function ChangeView({center,zoom}){\r\n        const map =useMap();\r\n        map.setView(center,zoom);\r\n        return null;\r\n    }\r\n    \r\n    return (\r\n        <MapContainer className=\"map\" center={center} zoom={zoom}>\r\n            <ChangeView center={center} zoom={zoom} />\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"        \r\n            />\r\n            {showDataOnMap(countries, casesType)}\r\n        </MapContainer>\r\n    );\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"000,000\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React,{useState,useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const buildChartData = (data,casesType) => {\r\n    let chartData=[];\r\n    let lastDataPoint;\r\n\r\n    for(let date in data.cases) {\r\n        if(lastDataPoint){\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    };\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType , ...props}) {\r\n    const [data,setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => {\r\n            return response.json()\r\n            })\r\n            .then((data) => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n                console.log(chartData);\r\n            });\r\n        }\r\n\r\n        fetchData();\r\n        \r\n    }, [casesType] );\r\n\r\n    \r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n              <Line \r\n                options = {options}\r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                          data: data,\r\n                          backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                          borderColor: \"#CC1034\",\r\n                        },\r\n                    ],\r\n                }}\r\n            />\r\n            )}    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;","import React, { useEffect, useState } from \"react\";\nimport { MenuItem, Select, FormControl, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\";\nimport \"./InfoBox.css\";\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType,setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState([34.80746,-40.4796]);\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }))\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, [])\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      setLoading(false);\n\n      countryCode === \"worldwide\" ? setMapCenter([34.80746,-40.4796]) : setMapCenter([data.countryInfo.lat, data.countryInfo.long]); \n      setMapZoom(4);\n    })\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select \n              variant=\"outlined\"\n              onChange={onCountryChange} \n              value={country}\n            >\n              <MenuItem value=\"worldwide\"> Worldwide </MenuItem>\n              {countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n            <InfoBox \n            isRed\n            active={casesType === \"cases\"}\n            className=\"infobox__cases\"\n            title=\"Coronavirus Cases\"\n            onClick = {(e) => setCasesType(\"cases\")}\n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)}\n            isloading={isLoading}\n             />\n            <InfoBox \n            active={casesType === \"recovered\"}\n            className=\"infobox__recovered\"\n            title=\"Recovered\" \n            onClick = {(e) => setCasesType(\"recovered\")}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)} \n            isloading={isLoading}\n            />\n            <InfoBox\n            isRed\n            active={casesType === \"deaths\"} \n            className=\"infobox__deaths\"\n            title=\"Deaths\" \n            onClick = {(e) => setCasesType(\"deaths\")}\n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={prettyPrintStat(countryInfo.deaths)} \n            isloading={isLoading}\n            />\n        </div>\n\n        <Map \n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n         />\n\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide New {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}